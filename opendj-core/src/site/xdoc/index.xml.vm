<?xml version="1.0" encoding="UTF-8"?>
<!--
  The contents of this file are subject to the terms of the Common Development and
  Distribution License (the License). You may not use this file except in compliance with the
  License.

  You can obtain a copy of the License at legal/CDDLv1.0.txt. See the License for the
  specific language governing permission and limitations under the License.

  When distributing Covered Software, include this CDDL Header Notice in each file and include
  the License file at legal/CDDLv1.0.txt. If applicable, add the following below the CDDL
  Header, with the fields enclosed by brackets [] replaced by your own identifying
  information: "Portions Copyright [year] [name of copyright owner]".

  Copyright 2013-2015 ForgeRock AS.
  Portions Copyright 2022 Wren Security.
-->
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>About Wren:DS LDAP SDK</title>
    <author email="info@wrensecurity.org">${project.organization.name}</author>
  </properties>
  <body>
    <section name="About Wren:DS LDAP SDK">
      <p>
        The Wren:DS LDAP SDK provides a set of modern, developer-friendly Java
        APIs as part of the Wren:DS product suite. The product suite includes the
        client SDK alongside command-line tools and sample code, a 100% pure
        Java directory server, and more. You can use Wren:DS SDK to create client
        applications for use with any server that complies with the,
        <a href='http://tools.ietf.org/html/rfc4510'>RFC 4510: Lightweight Directory
        Access Protocol (LDAP): Technical Specification Road Map</a>.
      </p>
      <p>
        The Wren:DS LDAP SDK brings you easy-to-use connection management,
        connection pooling, load balancing, and all the standard LDAP operations
        to read and write directory entries. Wren:DS LDAP SDK also lets you build
        applications with capabilities defined in additional draft and
        experimental RFCs that are supported by modern LDAP servers.
      </p>
    </section>
    <section name="Get the Wren:DS LDAP SDK">
      <p>
        You can start developing your LDAP applications now by obtaining the
        Wren:DS LDAP SDK using any of the following methods:
      </p>
      <subsection name="Maven">
        <p>
          By far the simplest method is to develop your application using Maven
          and add the following settings to your <b>pom.xml</b>:
        </p>
        <source>&lt;repositories>
  &lt;repository>
    &lt;id>wrensecurity-releases&lt;/id>
    &lt;name>Wren Security Release Repository&lt;/name>
    &lt;url>https://wrensecurity.jfrog.io/wrensecurity/releases&lt;/url>
    &lt;snapshots>
      &lt;enabled>false&lt;/enabled>
    &lt;/snapshots>
  &lt;/repository>
  &lt;repository>
    &lt;id>wrensecurity-snapshots&lt;/id>
    &lt;name>Wren Security Snapshot Repository&lt;/name>
    &lt;url>https://wrensecurity.jfrog.io/wrensecurity/snapshots&lt;/url>
    &lt;releases>
      &lt;enabled>false&lt;/enabled>
    &lt;/releases>
  &lt;/repository>
&lt;/repositories></source>
        <p>
          The following dependencies will load both the Wren:DS Core APIs and the
          Wren:DS Grizzly network transport:
        </p>
        <source>&lt;dependencies>
  &lt;dependency>
    &lt;groupId>${project.groupId}&lt;/groupId>
    &lt;artifactId>${project.artifactId}&lt;/artifactId>
    &lt;version>${project.version}&lt;/version>
  &lt;/dependency>
  &lt;dependency>
    &lt;groupId>${project.groupId}&lt;/groupId>
    &lt;artifactId>opendj-grizzly&lt;/artifactId>
    &lt;version>${project.version}&lt;/version>
  &lt;/dependency>
&lt;/dependencies></source>
        <p>
          In some use-cases, such as developing LDAP unit tests or embedded
          LDAP applications, the network transport is not required, in which
          case you can simply declare a dependency on the Wren:DS core APIs:
        </p>
        <source>&lt;dependencies>
  &lt;dependency>
    &lt;groupId>${project.groupId}&lt;/groupId>
    &lt;artifactId>${project.artifactId}&lt;/artifactId>
    &lt;version>${project.version}&lt;/version>
  &lt;/dependency>
&lt;/dependencies></source>
      </subsection>
      <subsection name="Download">
        <p>
          If you are not using Maven then you will need to download a pre-built
          binary from the Wren Security Maven repository, along with any compile
          time <a href="dependencies.html">dependencies</a>:
        </p>
        <ul>
          <li><a href="https://wrensecurity.jfrog.io/wrensecurity/releases/org/wrensecurity/wrends/${project.artifactId}">Stable releases</a></li>
          <li><a href="https://wrensecurity.jfrog.io/wrensecurity/snapshots/org/wrensecurity/wrends/${project.artifactId}/${project.version}">Latest development snapshot</a></li>
        </ul>
      </subsection>
      <subsection name="Build">
        <p>
          For the DIY enthusiasts you can build it yourself by checking out the
          latest code using <a href="scm.html">Git</a>
          and building it with Maven 3.
        </p>
      </subsection>
    </section>
    <section name="Getting started">
      <p>
        The following example shows how the Wren:DS SDK may be used to
        connect to a Directory Server, authenticate, and then perform a
        search. The search results are output as LDIF to the standard output:
      </p>
      <source>// Create an LDIF writer which will write the search results to stdout.
final LDIFEntryWriter writer = new LDIFEntryWriter(System.out);
Connection connection = null;
try
{
  // Connect and bind to the server.
  final LDAPConnectionFactory factory = new LDAPConnectionFactory("localhost", 1389);

  connection = factory.getConnection();
  connection.bind(userName, password);

  // Read the entries and output them as LDIF.
  final ConnectionEntryReader reader = connection.search(baseDN, scope, filter, attributes);
  while (reader.hasNext())
  {
    if (reader.isEntry())
    {
      // Got an entry.
      final SearchResultEntry entry = reader.readEntry();
      writer.writeComment("Search result entry: " + entry.getName().toString());
      writer.writeEntry(entry);
    }
    else
    {
      // Got a continuation reference.
      final SearchResultReference ref = reader.readReference();
      writer.writeComment("Search result reference: " + ref.getURIs().toString());
    }
  }
  writer.flush();
}
catch (final Exception e)
{
  // Handle exceptions...
  System.err.println(e.getMessage());
}
finally
{
  if (connection != null)
  {
    connection.close();
  }
}</source>
    </section>
  </body>
</document>
